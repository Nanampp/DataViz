ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank(), axis.title.y = element_text(vjust = 100)) -> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank(), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0))) -> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio\n") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank(), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0))) -> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio\n\n") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank(), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0))) -> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio\n\n") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank())+
opts(axis.title.y = theme_text(hjust=-0.5))-> g
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank())+
theme(axis.title.y = element_text(hjust=-0.5))-> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank())+
theme(axis.title.y = element_text(hjust=-1.5))-> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank())+
theme(axis.title.y = element_text(hjust=-5))-> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank())+
theme(axis.title.y = element_text(vjust=-5))-> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank())+
theme(axis.title.y = element_text(vjust=-10))-> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank())+
theme(axis.title.x = element_text(hjust=0),
axis.title.y = element_text(hjust=0))-> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group, axis.title.y = element_text(hjust=0))+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank())-> g
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group, scales = "free_y")+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank())-> g
ggplotly(g)
ggplot(data=df_out, mapping = aes(x=neighbourhood_group, y=price)) +
geom_boxplot(width=0.8, aes(color = neighbourhood_group))+
facet_wrap(~room_type)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.text.y = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank())+
coord_flip()-> g
ggplotly(g)
ggplot(data=df_out, mapping = aes(x=neighbourhood_group, y=price)) +
geom_boxplot(width=0.8, aes(color = neighbourhood_group))+
facet_wrap(~room_type)+
theme(axis.text.x = element_text(vjust = 0.5, hjust=1), axis.text.y = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank())+
coord_flip()-> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank())-> g
ggplotly(g)
runApp('Airbnb')
runApp('Airbnb')
runApp('Airbnb')
runApp('Airbnb')
runApp('Airbnb')
runApp()
runApp('Airbnb')
runApp('Airbnb')
runApp('Airbnb')
runApp('Airbnb')
runApp('Airbnb')
runApp('Airbnb')
library(readr)
library(dplyr)
library(mice)
library(VIM)
library(RPostgres)
library(DBI)
library(outliers)
library(EnvStats)
library(ggplot2)
library(plotly)
library(ggmap)
library(shiny)
library(shinythemes)
library(readr)
library(dplyr)
library(mice)
library(VIM)
library(RPostgres)
library(DBI)
library(outliers)
library(EnvStats)
library(ggplot2)
library(plotly)
library(ggmap)
library(shiny)
library(shinythemes)
library(readr)
library(dplyr)
library(mice)
library(VIM)
library(RPostgres)
library(DBI)
library(outliers)
library(EnvStats)
library(ggplot2)
library(plotly)
library(ggmap)
library(shiny)
library(shinythemes)
airbnb <- read.csv(file = "Datasets/AB_NYC_2019.csv", na = c("", "NA"))
head(airbnb)
pMiss <- function(x){sum(is.na(x))/length(x)*100}
apply(airbnb,2,pMiss)
md.pattern(airbnb, plot = TRUE, rotate.names=TRUE)
airbnb_columns=airbnb[,c("name","host_name","last_review","reviews_per_month")]
aggr(airbnb_columns, numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.5, gap=3)
borrar = c("name", "host_name")
airbnb = airbnb[, !(names(airbnb) %in% borrar)]
head(airbnb)
borrar = c("last_review")
airbnb = airbnb[, !(names(airbnb) %in% borrar)]
airbnb <- mutate_at(airbnb, c("reviews_per_month"), ~replace(., is.na(.), 0))
head(airbnb)
apply(airbnb,2,pMiss)
con <- dbConnect(RPostgres::Postgres(),
dbname = "d41lsl8qgestjf",
host = "ec2-3-229-43-149.compute-1.amazonaws.com",
port = 5432,
user = "uqtxfaqjjcxggw",
password = "916d311356954de6a99118d13578bb9d1b47bdc86cb8360a60b9606293bd882d")
dbWriteTable(con, 'airbnb', airbnb, row.names=FALSE, overwrite=TRUE)
df = dbGetQuery(con, "SELECT * FROM airbnb")
summary(df)
con <- dbConnect(RPostgres::Postgres(),
dbname = "d41lsl8qgestjf",
host = "ec2-3-229-43-149.compute-1.amazonaws.com",
port = 5432,
user = "uqtxfaqjjcxggw",
password = "916d311356954de6a99118d13578bb9d1b47bdc86cb8360a60b9606293bd882d")
df = dbGetQuery(con, "SELECT * FROM airbnb")
summary(df)
unique(df$room_type)
unique(df$neighbourhood_group)
length(unique(df$neighbourhood))
par(mfrow = c(1, 2))
g1 = ggplot(df) +
aes(x = price) +
geom_histogram(fill = "blue") +
theme_minimal()
g2 = ggplot(df) +
aes(x = minimum_nights) +
geom_histogram(fill = "red") +
theme_minimal()
g3 = ggplot(df) +
aes(x = "", y = price) +
geom_boxplot(fill = "blue") +
theme_minimal()
g4 = ggplot(df) +
aes(x = "", y = minimum_nights) +
geom_boxplot(fill = "red") +
theme_minimal()
fig = subplot(g1, g3,g2,g4, nrows = 2, shareX = FALSE)
annotations = list(
list(
x = 0.2,
y = 1.0,
text = "Price",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.43,
text = "Minimum_nights",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.45,
text = "",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
))
fig <- fig %>%layout(annotations = annotations)
#options(warn = -1)
fig
min(boxplot.stats(df$price)$out)
min(boxplot.stats(df$minimum_nights)$out)
c(quantile(df$price, 0.025), quantile(df$price, 0.975))
c(quantile(df$minimum_nights, 0.025), quantile(df$minimum_nights, 0.975))
c(median(df$price) - 3 * mad(df$price, constant = 1), median(df$price) + 3 * mad(df$price, constant = 1))
c(median(df$minimum_nights) - 3 * mad(df$minimum_nights, constant = 1), median(df$minimum_nights) + 3 * mad(df$minimum_nights, constant = 1))
grubbs.test(df$price)
grubbs.test(df$price, opposite = TRUE)
grubbs.test(df$minimum_nights)
grubbs.test(df$minimum_nights, opposite = TRUE)
nrow(df[df$price>500, ])
test <- rosnerTest(df$price, k = 1044)
test$all.stats[920:930, ]
nrow(df[df$minimum_nights>30, ])
test <- rosnerTest(df$minimum_nights, k = 747)
test$all.stats[460:470, ]
nrow(df)
nrow(df[df$price>=575 | df$minimum_nights>=50 , ])
nrow(df[df$price>=575 | df$minimum_nights>=50 , ])/nrow(df)*100.00
dbWriteTable(con, 'airbnb', df_out, row.names=FALSE, overwrite=TRUE)
df_out = df[df$price<575 & df$minimum_nights<50, ]
summary(df_out)
df_out %>%
group_by(host_id) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
head(5) -> top_hostid
g = ggplot(data= top_hostid, aes(x = reorder(factor(host_id), n), y=n)) +
geom_bar(stat="identity", fill = "blue") +
xlab("Host_Id") + ylab("Cant. alojamientos") +
ggtitle("Top 5 de los anfitriones con más alojamientos")
ggplotly(g)
borrar = c("calculated_host_listings_count")
df_out = df_out[, !(names(df_out) %in% borrar)]
df_host = filter(df_out, host_id %in% top_hostid$host_id)
df_host%>%
group_by(host_id, neighbourhood_group) %>%
summarise(n = n()) %>%
ggplot(aes(x=factor(host_id), y=n, fill=factor(neighbourhood_group))) +
geom_bar(stat="identity", position="dodge")+
xlab("Host_id") + ylab("Cant. Alojamientos") +
ggtitle("Top 5 de anfitriones con más alojamientos distribuidos por grupo vecindario")+
theme(legend.title = element_blank()) -> g
ggplotly(g)
p <- plot_ly(df_host, y = ~price,
alpha = 0.1, boxpoints = "suspectedoutliers")
p1 <- p %>% add_boxplot(x = "Overall")
p2 <- p %>% add_boxplot(x = ~factor(host_id))
subplot(
p1, p2, shareY = TRUE,
widths = c(0.2, 0.8), margin = 0
) %>% hide_legend()
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x=element_blank(), legend.title = element_blank())-> g
ggplotly(g)
ggplot(data=df_out, mapping = aes(x=neighbourhood_group, y=price)) +
geom_boxplot(aes(color = neighbourhood_group))+
theme(legend.title = element_blank()) -> g
ggplotly(g)
ggplot(data=df_out, mapping = aes(x=neighbourhood_group, y=price)) +
geom_boxplot(width=0.8, aes(color = neighbourhood_group))+
facet_wrap(~room_type)+
theme(axis.text.x = element_text(vjust = 0.5, hjust=1), axis.text.y = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank())+
coord_flip()-> g
ggplotly(g)
con <- dbConnect(RPostgres::Postgres(),
dbname = "d41lsl8qgestjf",
host = "ec2-3-229-43-149.compute-1.amazonaws.com",
port = 5432,
user = "uqtxfaqjjcxggw",
password = "916d311356954de6a99118d13578bb9d1b47bdc86cb8360a60b9606293bd882d")
df_out = dbGetQuery(con, "SELECT * FROM airbnb")
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
myLocation <- "Nueva York"
myMap <- get_map(location = myLocation, zoom = 10)
ggmap(myMap) +
geom_point(data=df_out, aes(x = longitude, y = latitude, colour= neighbourhood_group))+
theme(legend.title = element_blank())-> g
ggplotly(g)
ggmap(myMap) +
geom_point(data=df_out, aes(x = longitude, y = latitude, colour= price))+
scale_color_gradientn(colours = rainbow(5))+
facet_wrap(~neighbourhood_group, nrow = 2) -> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
con <- dbConnect(RPostgres::Postgres(),
dbname = "d41lsl8qgestjf",
host = "ec2-3-229-43-149.compute-1.amazonaws.com",
port = 5432,
user = "uqtxfaqjjcxggw",
password = "916d311356954de6a99118d13578bb9d1b47bdc86cb8360a60b9606293bd882d")
df = dbGetQuery(con, "SELECT * FROM airbnb")
summary(df)
con <- dbConnect(RPostgres::Postgres(),
dbname = "d41lsl8qgestjf",
host = "ec2-3-229-43-149.compute-1.amazonaws.com",
port = 5432,
user = "uqtxfaqjjcxggw",
password = "916d311356954de6a99118d13578bb9d1b47bdc86cb8360a60b9606293bd882d")
df = dbGetQuery(con, "SELECT * FROM airbnb")
summary(df)
df_out = df[df$price<575 & df$minimum_nights<50, ]
dbWriteTable(con, 'airbnb', df_out, row.names=FALSE, overwrite=TRUE)
summary(df_out)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x = element_text(vjust = 0.5, hjust=2), axis.text.y = element_text(angle = 90, vjust = 0.5, hjust=2))+
theme(legend.title = element_blank())-> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.x = element_text(vjust = 0.5, hjust=2), axis.text.y = element_text(angle = 90, vjust = 0.5, hjust=2))+
theme(axis.text.x=element_blank(), legend.title = element_blank())-> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.y = element_text(angle = 90, vjust = 0.5, hjust=-2))+
theme(axis.text.x=element_blank(), legend.title = element_blank())-> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.y = element_text(angle = 90, vjust = -0.5, hjust=-2))+
theme(axis.text.x=element_blank(), legend.title = element_blank())-> g
ggplotly(g)
df_out %>%
group_by(neighbourhood_group, room_type)%>%
summarise(m = mean(price)) -> group_type
group_type%>%
ggplot(aes(x=room_type, y=m, fill=room_type)) +
geom_bar(stat="identity")+
facet_wrap(~neighbourhood_group)+
xlab("Grupo Vecindario") + ylab("Precio Medio") +
ggtitle("Precio promedio por grupo de vecindario y tipo de alojamiento")+
theme(axis.text.y = element_text(angle = 90))+
theme(axis.text.x=element_blank(), legend.title = element_blank())-> g
ggplotly(g)
ggplot(data=df_out, mapping = aes(x=neighbourhood_group, y=price)) +
geom_boxplot(width=0.8, aes(color = neighbourhood_group))+
facet_wrap(~room_type)+
theme(axis.text.x = element_text(vjust = 0.5, hjust=1), axis.text.y = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank(), axis.text.x=element_blank())+
coord_flip()-> g
ggplotly(g)
ggplot(data=df_out, mapping = aes(x=neighbourhood_group, y=price)) +
geom_boxplot(width=0.8, aes(color = neighbourhood_group))+
facet_wrap(~room_type)+
theme(axis.text.x = element_text(vjust = 0.5, hjust=1), axis.text.y = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank(), axis.text.y=element_blank())+
coord_flip()-> g
ggplotly(g)
shiny::runApp('Shiny_Airbnb')
runApp('Shiny_Airbnb')
runApp('Shiny_Airbnb')
runApp('Shiny_Airbnb')
